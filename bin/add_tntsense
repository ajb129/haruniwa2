#!/bin/bash

DATAFILE=output_add

####################
# help information #
####################

function help_information () {

cat 1>&2 << END
NAME
      add_tntsense - add sense information to parse trees

SYNOPSIS
      add_tntsense file

DESCRIPTION
      Filter to add sense information to parse trees from stdin.

      Unidic information is taken from file.

OPTIONS
END

cat $0 | grep " \# " 1>&2

}

function example () {

FILE=${TMP:-"/tmp"}/output_add$$

cat > "${FILE}" << FILE
出稼ぎ労働者	N
は	P-OPTR
上海	NPR
を	P-ROLE
建設	VB;建設する
する	VB0
と	P-SCON
同時	N
に	P-ROLE
、	PU
大きな	ADJN
社会問題	N
と	P-ROLE
治安問題	N
を	P-ROLE
も	P-OPTR
招い	VB;招く
て	P-SCON
いる	VB2;居る
。	PU
EOS
FILE

cat 1>&2 << END

EXAMPLE
      $ cat example
END

cat $0 | sed '1,/<< FILE/d; /^FILE$/,$d' | sed 's/^/     -| /' 1>&2

cat 1>&2 << END
      $ cat << EOF | add_tntsense example | munge-trees -p
END

cat $0 | sed '1,/^cat << DEMO/d; /^DEMO$/,$d' | munge-trees -p | sed 's/^/      > /' 1>&2

cat 1>&2 << END
      > EOF
END

cat << DEMO | $0 "${FILE}" | munge-trees -p | sed 's/^/      -| /' 1>&2
( (IP-MAT (PP (NP (N 出稼ぎ) (N 労働) (N 者)) (P は)) (NP-SBJ *) (PP (NP (PP (IP-ADV (PP (NP (NPR 上海)) (P を)) (NP-OB1 *を*) (VB 建設) (VB0 する)) (P と)) (N 同時)) (P に)) (PU 、) (PP (NP (ADJN 大きな) (NML (CONJP (NP (N 社会) (N 問題)) (P と)) (NP (N 治安) (N 問題)))) (P を) (P も)) (NP-OB1 *を*) (VB 招い) (P て) (VB2 いる) (PU 。)) (ID 100_wikipedia_Shanghai;MJ))
DEMO

rm "${FILE}"

}

function see_also () {

cat 1>&2 << END

SEE ALSO
      add_pron(1), add_unidic(1)
END

}

while test $# -gt 0 ; do
  case "$1" in

      --example)      # show an example
         help_information
         example
         see_also
         exit ;;

      -*)             # show this help message
         help_information
         see_also
         exit ;;

      *)              # file name of data to add
         DATAFILE="$1" ; shift ;;
 
  esac
done

######################
# script starts here #
######################

if test ! -f "${DATAFILE}"; then
 help_information
 exit
fi

TEMPDATA=${TMP:-"/tmp"}/output_data$$

# place sense word information on the first character of the word
cat "${DATAFILE}" | \
awk '
BEGIN { FS="\t" }

NF < 2 { next }

{

n = split($1, parts, "")

for (i = 1; i <= n; i++) { 

if (i == 1 && /.;./) {
if ($3) { print parts[i] "\t" gensub(/^.*;/, "", 1, $3) }
else { print parts[i] "\t" gensub(/^.*;/, "", 1, $2) }
}
else {
print parts[i]
}

}

}
' > "${TEMPDATA}"

TEMP=${TMP:-"/tmp"}/output_comb$$

# change the input tree so words are separated into characters and add the sense information
tree_to_charactertree | tree_to_table | \
gawk -v DATA=${TEMPDATA} '
BEGIN {
  place = 1

# remember data
  while ((getline < DATA) > 0) {
    split($0, part, "\t")
    character[++count] = part[1]
    info[count] = part[2]
  }
  close(DATA)
}

NF == 0 { print; next }

$2 == "ID" { print; next }

$NF ~ /^\*/ && $NF ~ /\*$|\*-[0-9][0-9]*$/ { print; next }

$NF ~ /^\＊/ && $NF ~ /\＊$|\＊-[0-9][0-9]*$/ { print; next }

{
if ($NF == character[place]) {
  if (info[place] && $1 !~ /VB2\*$/) { print $0, character[place] "☺" info[place] }
  else { print }
  place++
}
else { print }
}

' | \
awk '

NF > 4 {

if (index($5, $4)) {
  print
}
else {
  print "PROBLEM:" $0
}

next
}

{ print }

' > "${TEMP}"

TSCRIPT=${TMP:-"/tmp"}/output_tscript$$

# create tsurgeon script for changing sense information placement
# and collapsing characters back to words
cat > "${TSCRIPT}" << EOF
SENSE=x \$.. (SENSE=y !\$,, (SENSE \$,, SENSE))

move y >-1 x
excise y y

SENSE=y > (__=x < /^\+\$/)

move y \$- x

/^\+\$/=x < (__ !< __)

excise x x


%%%%%%%%%%%%%%%%%%%%%%%
% Add blank sense
VB0=x !\$ SENSE

insert (SENSE *.0*) \$- x


VB=x !\$ SENSE

insert (SENSE *.0*) \$- x


%%%%%%%%%%%%%%%%%%%%%%%%
% move SENSE past VB0
SENSE=x \$. VB0=y

move x \$- y


%%%%%%%%%%%%%%%%%%%%%%%%%
% remove identical SENSE
(SENSE < /^(.*)\$/#1\%index) \$. (SENSE=x < /^(.*)\$/#1\%index)

delete x


%%%%%%%%%%%%%%%%%%%%
% remove zero SENSE
SENSE \$. (SENSE=x < /^\*\.0\*\$/)

delete x

EOF

# put everything back together as an output tree or report errors
if test $(cat "${TEMP}" | grep -c PROBLEM) -gt 0; then
  cat "${TEMP}"
else
  cat "${TEMP}" | \
  table_to_tree | \
  sed '
s/☺\([^)]*\.[[:digit:]]\+\))/) (SENSE *\1*)/g
s/☺\([^)]*\))/) (SENSE *\1*)/g
' | \
  tsurgeon_script "${TSCRIPT}" --together
fi

# clean things up
rm "${TEMP}" "${TEMPDATA}" "${TSCRIPT}"


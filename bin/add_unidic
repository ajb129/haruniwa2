#!/bin/bash

DATAFILE=output_add

####################
# help information #
####################

function help_information () {

cat 1>&2 << END
NAME
      add_unidic - add unidic information to parse trees

SYNOPSIS
      add_unidic file

DESCRIPTION
      Filter to add unidic information to parse trees from stdin.

      Unidic information is taken from file.

OPTIONS
END

cat $0 | grep " \# " 1>&2

}

function example () {

FILE=${TMP:-"/tmp"}/output_add$$

cat > ${FILE} << FILE
今秋	コンシュー	コンシュウ	今秋	名詞-普通名詞-副詞可能		
に	ニ	ニ	に	助詞-格助詞		
は	ワ	ハ	は	助詞-係助詞		
議長	ギチョー	ギチョウ	議長	名詞-普通名詞-一般		
国	コク	コク	国	接尾辞-名詞的-一般		
と	ト	ト	と	助詞-格助詞		
し	シ	スル	為る	動詞-非自立可能	サ行変格	連用形-一般
て	テ	テ	て	助詞-接続助詞		
アジア	アジア	アジア	アジア-Asia	名詞-固有名詞-地名-一般		
・			・	補助記号-一般		
太平	タイヘー	タイヘイ	タイヘイ-外国	名詞-固有名詞-地名-一般		
洋	ヨー	ヨウ	洋	接尾辞-名詞的-一般		
経済	ケーザイ	ケイザイ	経済	名詞-普通名詞-一般		
協力	キョーリョク	キョウリョク	協力	名詞-普通名詞-サ変可能		
会議	カイギ	カイギ	会議	名詞-普通名詞-サ変可能		
に	ニ	ニ	に	助詞-格助詞		
臨ま	ノゾマ	ノゾム	臨む	動詞-一般	五段-マ行	未然形-一般
なけれ	ナケレ	ナイ	ない	助動詞	助動詞-ナイ	仮定形-一般
ば	バ	バ	ば	助詞-接続助詞		
なら	ナラ	ナル	成る	動詞-非自立可能	五段-ラ行	未然形-一般
ない	ナイ	ナイ	ない	助動詞	助動詞-ナイ	終止形-一般
。			。	補助記号-句点		
EOS
FILE

cat 1>&2 << END

EXAMPLE
      $ cat example
END

cat $0 | sed '1,/<< FILE/d; /^FILE$/,$d' | sed 's/^/     -| /' 1>&2

cat 1>&2 << END
      $ cat << EOF | add_unidic example | munge-trees -p
END

cat $0 | sed '1,/^cat << DEMO/d; /^DEMO$/,$d' | munge-trees -p | sed 's/^/      > /' 1>&2

cat 1>&2 << END
      > EOF
END

cat << DEMO | $0 ${FILE} | munge-trees -p | sed 's/^/      -| /' 1>&2
( (IP-MAT (NP-SBJ *pro*) (PP (NP (N 今秋)) (P に) (P は)) (PP (NP (N 議長国)) (P として)) (PP (NP (NPR アジア・太平洋経済協力会議)) (P に)) (VB 臨ま) (MD なければならない) (PU 。)) (ID 12_newswire_KTC_MAINICHI-1995;950101008-004;MJ))
DEMO

rm ${FILE}

}

function see_also () {

cat 1>&2 << END

SEE ALSO
      add_pron(1)
END

}

while test $# -gt 0 ; do
  case "$1" in

      --example)      # show an example
         help_information
         example
         see_also
         exit ;;

      -*)             # show this help message
         help_information
         see_also
         exit ;;

      *)              # file name of data to add
         DATAFILE="$1" ; shift ;;
 
  esac
done

######################
# script starts here #
######################

if test ! -f ${DATAFILE}; then
 help_information
 exit
fi

TEMPDATA=${TMP:-"/tmp"}/output_data$$

# place unidic word information on the first character of the word
cat ${DATAFILE} | \
awk '
BEGIN { FS="\t" }

NF < 2 { next }

{

n = split($1, parts, "")

for (i = 1; i <= n; i++) { 

if (i == 1) {
print parts[i] "\t" $0
}
else {
print parts[i]
}

}

}
' | sed 's/\t/@/g' > ${TEMPDATA}

TEMP=${TMP:-"/tmp"}/output_comb$$

# change the input tree so words are separated into characters and add the unidic information
tree_to_charactertree | tree_to_table | \
gawk -v DATA=${TEMPDATA} '
BEGIN {
  place = 1

# remember data
  while ((getline < DATA) > 0) {
    split($0, part, "@")
    character[++count] = part[1]
    if (part[5]) { info[count] = gensub(/^[^@]*@/, "", 1, $0) }
  }
  close(DATA)
}

NF == 0 { print; next }

$2 == "ID" { print; next }

$NF ~ /^\*/ && $NF ~ /\*$|\*-[0-9][0-9]*$/ { print; next }

$NF ~ /^\＊/ && $NF ~ /\＊$|\＊-[0-9][0-9]*$/ { print; next }

{

if ($NF == character[place]) {
  if (info[place]) { print $0, character[place] "☺" info[place]
  } else { print }
  place++
}
else { print }

}

' | \
awk '

NF > 4 {

if (index($5, $4)) {
  print
}
else {
  print "PROBLEM:" $0
}

next
}

{ print }

' > ${TEMP}

TSCRIPT=${TMP:-"/tmp"}/output_tscript$$

# create tsurgeon script for changing unidic information placement
# and collapsing characters back to words
cat > ${TSCRIPT} << EOF
unidic < /.\|\$/=x !\$.. unidic

relabel x /^(.*).\$/\$1/

unidic=x \$.. (unidic=y !\$,, (unidic \$,, unidic))

move y >-1 x
excise y y

unidic=y > (__=x < /^\+\$/)

move y \$+ x

/^\+\$/=x < (__ !< __)

excise x x

EOF

# put everything back together as an output tree or report errors
if test $(cat ${TEMP} | grep -c PROBLEM) -gt 0; then
  cat ${TEMP}
else
  cat ${TEMP} | \
  table_to_tree | \
  sed 's/☺\([^)]*\))/) (unidic \1|)/g' | \
  tsurgeon_script ${TSCRIPT} --together | \
  sed 's/(unidic \([^)]*\)) (\([^ ]*\) /(\2;\1 /g'
fi

# clean things up
rm ${TEMP} ${TEMPDATA} ${TSCRIPT}


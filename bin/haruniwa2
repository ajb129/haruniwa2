#!/bin/bash

BLOCK=1

MODEL="$(japanese_model_location)"

####################
# help information #
####################

function help_information () {

cat 1>&2 << END
NAME
      haruniwa2 - parse input

SYNOPSIS
      haruniwa2 [OPTIONS]

DESCRIPTION
      Parse input with the HARUNIWA grammar model for Japanese using
      the Berkley parser.

      Input should be in TnT format where each line contains one
      word token and one part-of-speech tag separated by a single tab
      character.  EOS indicates end-of-sentence.

OPTIONS
END

cat $0 | grep " \# " 1>&2

}

function example () {

cat 1>&2 << END

EXAMPLE
      $ cat << EOF | haruniwa2 | munge-trees -p
END

cat $0 | sed '1,/^cat << DEMO1/d; /^DEMO1$/,$d' | sed 's/^/      > /' 1>&2

cat 1>&2 << END
      > EOF
END

cat << DEMO1 | $0 | munge-trees -p | sed 's/^/      -| /' 1>&2
すもも	N
も	P
もも	N
も	P
もも	N
の	P
うち	N
。	PU
EOS
にわ	N
に	P
は	P
に	NUM
わ	CL
の	P
にわとり	N
が	P
いる	VB
。	PU
EOS
DEMO1


cat 1>&2 << END

EXAMPLE
      $ cat << EOF | haruniwa2 3
END

cat $0 | sed '1,/^cat << DEMO2/d; /^DEMO2$/,$d' | sed 's/^/      > /' 1>&2

cat 1>&2 << END
      > EOF
END

cat << DEMO2 | $0 3 | sed 's/^/      -| /' 1>&2
ゴスタック	N
は	P
ドッシュ	N
を	P
ディスティム	VB
し	VB0
ます	AX
。	PU
EOS
DEMO2

}

while test $# -gt 0 ; do
  case "$1" in

      -i|--id)                # must receive an argument giving ID basename
         BASENAME=$2 ; shift 2 ;;

      --raw)                  # output parse without any modification
                              #   (default is to post-process with parse_decorate and parse_finish)
         RAW=1 ; shift ;;

      --top|-top)             # output with TOP as root node
         TOP=1 ; shift ;;

      --basic|-basic)         # output without root node wrapping
         BASIC=1 ; shift ;;

      --rank|-rank)           # output prepared for reranking
         RANK=1 ; shift ;;

      [0-9]*)                 # number of most probable parse trees output (default is 1)
         BLOCK=$1; shift ;;

      --example)              # show examples
         help_information
         example
         exit ;;

      -*)                     # show this help message
         help_information
         exit ;;

      *)                      # location of grammar model
         MODEL=$1; shift ;;

  esac
done

######################
# script starts here #
######################

DIR=$(dirname $0)/../scripts

export PATH=${DIR}:${PATH}

if test "${TOP}"; then
function stamp () {
  sed '/^(number /d' | \
  sed "/^(LOGVITPROB / { s/^(LOGVITPROB (VALUE [^ ()]*) //; s/)$// }"
}
elif test "${BASIC}"; then
function stamp () {
  sed '/^(number /d' | \
  sed "/^(LOGVITPROB / { s/^(LOGVITPROB (VALUE [^ ()]*) //; s/)$// }" | \
  sed '/^(TOP / {s/^(TOP //; s/)$//}'
}
elif test "${RANK}"; then
function stamp () {
  sed '/^(number /d' | \
  sed "/^(LOGVITPROB / { s/^(LOGVITPROB (VALUE \([^ ()]*\)) /\1\n/; s/)$// }" | \
  sed '/^(TOP / {s/^(TOP /(S1 /}' | sed 's/^(number \([0-9]*\))$/\1\t1/;'
}
else
  if test ! "${BASENAME}"; then
    BASENAME="ex$(date +%s)"
  fi
function stamp () {
  sed '/^(number /d' | \
  sed "/^(LOGVITPROB / { s/^(LOGVITPROB (VALUE [^ ()]*) //; s/)$// }" | \
  awk -v BASENAME="${BASENAME}" '
function clean(s) {
  s = gensub(/^\(TOP /, "", 1, s)
  s = gensub(/\)$/, "", 1, s)
  return(s)
}

{ printf("( %s (ID %s_%s;JP))\n", clean($0), ++NUM, BASENAME) }
'
}
fi


berkeley_parse "${MODEL}" "${BLOCK}" | \
if test "${RAW}"; then
  cat
else
  "${DIR}/tsurgeon_script" "${DIR}/flatten.tsurgeon" "${DIR}/japanese.tsurgeon" | stamp | parse_decorate
fi


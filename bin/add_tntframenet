#!/bin/bash

DATAFILE=output_add

####################
# help information #
####################

function help_information () {

cat 1>&2 << END
NAME
      add_tntframenet - add sense information to parse trees

SYNOPSIS
      add_tntframenet file

DESCRIPTION
      Filter to add sense information to parse trees from stdin.

      Unidic information is taken from file.

OPTIONS
END

cat $0 | grep " \# " 1>&2

}

function example () {

FILE=${TMP:-"/tmp"}/output_add$$

# Keyaki_tntsense_unidic purple_basi 21 | parse_indexed --framenet | tree_to_tnt --framenet

cat > "${FILE}" << FILE
僕
が
作っ	;{luID:};{luName:作る.v};{frameID:};{frameName:};{ARG0:};{ARG1:}
た
ヘルシー	;{luID:};{luName:ヘルシー-healthy.a};{frameID:};{frameName:};{ARG0:}
な
野菜
の
ピザ	;{luID:};{luName:ピザ.n};{frameID:};{frameName:};{REL:};{REL:};{の:};<ENTITY[1]h>
は
おいしかっ	;{luID:};{luName:美味しい.a};{frameID:};{frameName:};{ARG0:}
た
です
。
EOS
FILE

cat 1>&2 << END

EXAMPLE
      $ cat example
END

cat $0 | sed '1,/<< FILE/d; /^FILE$/,$d' | sed 's/^/     -| /' 1>&2

cat 1>&2 << END
      $ cat << EOF | add_tntframenet example | munge-trees -p
END

cat $0 | sed '1,/^cat << DEMO/d; /^DEMO$/,$d' | munge-trees -p | sed 's/^/      > /' 1>&2

cat 1>&2 << END
      > EOF
END

cat << DEMO | $0 "${FILE}" | munge-trees -p | sed 's/^/      -| /' 1>&2
( (IP-MAT (PP (NP (IP-REL (NP-OB1 *T*) (PP (NP (PRO 僕)) (P が)) (NP-SBJ *が*) (VB 作っ) (AXD た)) (IP-REL (NP-SBJ *T*) (ADJN ヘルシー) (AX な)) (PP (NP (N 野菜)) (P の)) (N ピザ)) (P は)) (NP-SBJ *) (ADJI おいしかっ) (AXD た) (AX です) (PU 。)) (ID 21_textbook_purple_basic;page_31;JP))
DEMO

rm "${FILE}"

}

while test $# -gt 0 ; do
  case "$1" in

      --example)      # show an example
         help_information
         example
         exit ;;

      -*)             # show this help message
         help_information
         exit ;;

      *)              # file name of data to add
         DATAFILE="$1" ; shift ;;
 
  esac
done

######################
# script starts here #
######################

if test ! -f "${DATAFILE}"; then
 help_information
 exit
fi

TEMPDATA=${TMP:-"/tmp"}/output_data$$

# place sense word information on the first character of the word
cat "${DATAFILE}" | sed 's/_/♕/g' | \
awk '
BEGIN { FS="\t" }

$1 ~ /\EOS/ || NF == 0 { next }

{

n = split($1, parts, "")

for (i = 1; i <= n; i++) { 

if (i == 1 && /.;./) {
if ($3) { print parts[i] "\t" gensub(/^[^;]*;/, "", 1, $3) }
else { print parts[i] "\t" gensub(/^[^;]*;/, "", 1, $2) }
}
else {
print parts[i]
}

}

}
' > "${TEMPDATA}"

TEMP=${TMP:-"/tmp"}/output_comb$$

# change the input tree so words are separated into characters and add the sense information
tree_to_charactertree | tree_to_table | \
gawk -v DATA=${TEMPDATA} '
BEGIN {
  place = 1

# remember data
  while ((getline < DATA) > 0) {
    split($0, part, "\t")
    character[++count] = part[1]
    info[count] = part[2]
  }
  close(DATA)
}

NF == 0 { print; next }

$2 == "ID" { print; next }

$NF ~ /^\*/ && $NF ~ /\*$|\*-[0-9][0-9]*$/ { print; next }

$NF ~ /^\＊/ && $NF ~ /\＊$|\＊-[0-9][0-9]*$/ { print; next }

{
if ($NF == character[place]) {
  if (info[place] && $1 !~ /VB2\*$/) { print $0, character[place] "☺" info[place] }
  else { print }
  place++
}
else { print }
}

' | \
awk '

NF > 4 {

if (index($5, $4)) {
  print
}
else {
  print "__PROBLEM__:" $0
}

next
}

{ print }

' > "${TEMP}"

TSCRIPT=${TMP:-"/tmp"}/output_tscript$$

# create tsurgeon script for changing sense information placement
# and collapsing characters back to words
cat > "${TSCRIPT}" << EOF
FRAME=x \$.. (FRAME=y !\$,, (FRAME \$,, FRAME))

move y >-1 x
excise y y

FRAME=y > (__=x < /^\+\$/)

move y \$- x

/^\+\$/=x < (__ !< __)

excise x x


%%%%%%%%%%%%%%%%%%%%%%%
% merge characters
__=x \$ (__=y !< __)
  
relabel x /^.*\$/={x}={y}/
delete y


%%%%%%%%%%%%%%%%%%%%%%%
% Add blank sense
VB0=x !\$ FRAME

insert (FRAME *.0*) \$- x


VB=x !\$ FRAME

insert (FRAME *.0*) \$- x


%%%%%%%%%%%%%%%%%%%%%%%%%
% remove identical FRAME
(FRAME < /^(.*)\$/#1\%index) \$. (FRAME=x < /^(.*)\$/#1\%index)

delete x


%%%%%%%%%%%%%%%%%%%%
% remove zero FRAME
FRAME \$. (FRAME=x < /^\*\.0\*\$/)

delete x

EOF

# put everything back together as an output tree or report errors
if test $(cat "${TEMP}" | grep -c __PROBLEM__) -gt 0; then
  cat "${TEMP}"
else
  cat "${TEMP}" | \
  table_to_tree | \
  sed '
s/☺\([^)]*\.[[:digit:]]\+\))/) (FRAME *\1*)/g
s/☺\([^)]*\))/) (FRAME *\1*)/g
' | \
  tsurgeon_script "${TSCRIPT}"
fi

# clean things up
rm "${TEMP}" "${TEMPDATA}" "${TSCRIPT}"


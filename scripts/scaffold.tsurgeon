%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% punctuation
PU=a $. PU=b !> PU

createSubtree PU a b


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% change N-LETTER
N|N-LETTER $. (N-LETTER=x !$. N|N-LETTER)

relabel x SUFFIX


N-LETTER=x < __

relabel x N


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% merge SUFFIX
!/^PU|RB/=a $. SUFFIX=b !> MERGESUFFIX

createSubtree MERGESUFFIX a b


MERGESUFFIX=x <1 /^(.*)$/`#'1\%pos !<1 MERGESUFFIX

relabel x /^(.*)$/\%{pos}/


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% merge PREFIX
PREFIX=a $. !/^PU|RB/=b !> MERGEPREFIX

createSubtree MERGEPREFIX a b


MERGEPREFIX=x <-1 /^(.*)$/`#'1\%pos !<-1 MERGEPREFIX

relabel x /^(.*)$/\%{pos}/


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% change POS for ない
ADJI=x < ない|なく|なさ|なかっ|なき|なけれ|なかろ $, (/^P\b/ $, /^VB\b/)

relabel x NEG


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% verbal noun

% verbal noun followed by case particle
/^NV\b/=x $. /^P-ROLE\b/

relabel x N


% sentence final verbal noun
/^NV\b/=x [ $. (/^PU/ >-1 /^IP/) | >-1 /^IP/ ]

relabel x /^NV(.*)$/VB$1/


% verbal noun followed by する
/^NV\b/=x $. /^VB2\b|^VB0\b/=y

relabel x /^NV(.*)$/VB$1/
relabel y /^VB2(.*)$/VB0$1/


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% change VB to VB2
/^VB\b/=x < /^な[ら|り|る|れ|ろ]/ $, NEG

relabel x /^VB(.*)/VB2$1/


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% merge VB
/^VB\b/=a $. /^VB\b/=b !> MERGEVB

createSubtree MERGEVB a b


MERGEVB=x < (/^VB\b(.*)$/`#'1\%first $. /^VB\b(.*)$/`#'1\%second)

relabel x /^.*$/VB\%{first}\%{second}/


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% merge N - N
N=a $. (PU|SYM < − $. N=b) !> N

createSubtree N a b


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% make operator particles
P=x < (/か|きり|くらい|ぐらい|こそ|ごと|さえ|しか|しも|すら|だけ|だって|だり|でも|とも|ともあれ|なんか|なんて|にしてからが|にしても|にせよ|に限って|のみ|は|ばかし|ばかり|も|ものなら|ら|だが|ずつ/ !> /^P-OPTR|^P-FINAL/ !$ __)

relabel x P-OPTR


%%%%%%%%%%%%%%%%%%%%%%%%%
% change ADJI to ADV
ADJI=x < /.*く$/ $. VB

relabel x ADV


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% よう
/^VB-VOL/=y < /.よう$/=x

insert (MD よう) $- y
relabel x /^(.*)よう/$1/
relabel y /^VB-VOL(.*)$/VB$1/


/^VB-VOL/=y < /.う$/=x

insert (MD う) $- y
relabel x /^(.*)う$/$1/
relabel y /^VB-VOL(.*)$/VB$1/


/^VB/=y < /.よう$/=x

insert (MD よう) $- y
relabel x /^(.*)よう/$1/
relabel y /^VB(.*)$/VB$1/


%%%%%%%%%%%%%%%%%%%%%%
% change INTJ to D
/^INTJ/=x < あの $. N

relabel x D


%%%%%%%%%%%%%%%%%%%%%%
% change P to N
/^P\b/=x < の [ $. (/^P\b/ < も|は) | $. /^P-ROLE/ ]

relabel x N


% のには
/^P\b/=a < の $. (__=b < に $. (__ < は))

relabel a N
relabel b P-ROLE


%%%%%%%%%%%%%%%%%%%%%
% sentence initial CONJ

% それでも
__=a < それ $. (__ < で $. (__=b < も)) !$, __ !> CONJ

createSubtree CONJ a b

% それで
__=a < それ $. (__=b < で) !$, __ !> CONJ

createSubtree CONJ a b


% なぜならば
__=a < なぜ $. (__ < なら $. (__=b < ば)) !$, __ !> CONJ

createSubtree CONJ a b


% けれども
__=a < けれど $. (/^P\b/=b < も) !$, __ !> CONJ

createSubtree CONJ a b


% それにしても
__=a < それ $. (__=b < にしても) !$, __ !> CONJ

createSubtree CONJ a b

%%%%%%%%%%%%%%%%%%%%%%%%
% CONJ instances

% だけではなくて
__=a < だけ $. (__ < で $. (__ < は $. (__ < なく $. (__=b < て)))) !> CONJ

createSubtree CONJ a b


% だけでなくて
__=a < だけ $. (__ < で|じゃ $. (__ < なく $. (__=b < て))) !> CONJ

createSubtree CONJ a b


% だけではなく
__=a < だけ $. (__ < で $. (__ < は $. (__=b < なく))) !> CONJ

createSubtree CONJ a b


% だけでなく
__=a < だけ $. (__ < で|じゃ $. (__=b < なく)) !> CONJ

createSubtree CONJ a b


%%%%%%%%%%%%%%%%%%%%%%%%%%%
% AX

% つつある
/^P\b/=a < つつ $. (/^VB/=b < あっ|あら|あり|ある|あれ|あろ) !> AX

createSubtree AX a b


%%%%%%%%%%%%%%%%%%%%%%%%%
% D

% こう言った こういった そう言った そういった ああ言った ああいった as D
__=a < こう|そう|ああ $. (__ < 言っ|いっ $. (__=b < た $. __))

createSubtree D a b


% こう云う こう言う こういう そう云う そう言う そういう ああ云う ああ言う ああいう as D
__=a < こう|そう|ああ $. (__=b < 云う|言う|いう $. __)

createSubtree D a b


%%%%%%%%%%%%%%
% ADV

% いつも
WPRO=a < いつ $. (/^P\b/=b < も) !> ADV

createSubtree ADV a b


% もしかしたら
__=a < もし $. (__ < か $. (__ < し $. (__=b < たら))) !> ADV

createSubtree ADV a b


% 良くも悪くも
__=a < 良く $. (__ < も $. (__ < 悪く $. (__=b < も))) !> ADV

createSubtree ADV a b


% そしたら
__=a < そ $. (__ < し $. (__=b < たら)) !> ADV

createSubtree ADV a b


% どうも
__=a < どう $. (__=b < も) !> ADV

createSubtree ADV a b


% ADV そう
!MD=x < そう $, /^VB|^ADJ|^AX|^PASS|^NEG/

relabel x MD


%%%%%%%%%%%%%%
% WADV

% どうやって
__=a < どう $.  (__ < やっ $.  (__=b < て)) !> WADV

createSubtree WADV a b


%%%%%%%%%%%%%%
% MD

% かもしれない
__=a < かも $. (__ < しれ $. (__=b < ない)) !> MD

createSubtree MD a b


% かも知れません
__=a < か $. (__ < も $. (__ < 知れ|しれ $. (__ < ませ $. (__=b < ん)))) !> MD

createSubtree MD a b


% ざるを得ません
__=a < ざる $. (__ < を $. (__ < 得 $. (__ < ませ $. (__=b < ん)))) !> MD

createSubtree MD a b


% てもいい
__=a < て $. (__ < も $. (__=b < いい|よい|良い)) $,, /^ADJ|^VB|^AX|^NP-PRD/ !> MD

createSubtree MD a b


% ていい
__=a < て $. (__=b < いい|よい|良い) $,, /^ADJ|^VB|^AX|^NP-PRD/ !> MD

createSubtree MD a b


% 必要がある
N=a < 必要 $. (/^P\b/ < が|は $. (/^VB/=b < あっ|あら|あり|ある|あれ|あろ)) $, /^VB|^ADJ|^AX|^PASS|^NEG/ !> MD

createSubtree MD a b


% 必要がない
N=a < 必要 $. (/^P\b/ < が|は $. (__=b < /^[な|無][かろ|かっ|く|い|けれ]/)) $, /^VB|^ADJ|^AX|^PASS|^NEG/ !> MD

createSubtree MD a b


% 可能性がある
N=a < 可能性 $. (/^P\b/ < が|は $. (/^VB/=b < あっ|あら|あり|ある|あれ|あろ)) $, /^VB|^ADJ|^AX|^PASS|^NEG/ !> MD

createSubtree MD a b


% 可能性がない
N=a < 可能性 $. (/^P\b/ < が|は $. (__=b < /^[な|無][かろ|かっ|く|い|けれ]/)) $, /^VB|^ADJ|^AX|^PASS|^NEG/ !> MD

createSubtree MD a b


% おそれがある
N=a < おそれ $. (/^P\b/ < が|は $. (/^VB/=b < あっ|あら|あり|ある|あれ|あろ)) $, /^VB|^ADJ|^AX|^PASS|^NEG/ !> MD

createSubtree MD a b


% おそれがない
N=a < おそれ $. (/^P\b/ < が|は $. (__=b < /^[な|無][かろ|かっ|く|い|けれ]/)) $, /^VB|^ADJ|^AX|^PASS|^NEG/ !> MD

createSubtree MD a b

% なくちゃなりません
__=a < なく $. (__=y < ちゃ $. (__ < いけ|なり $. (__  < ませ $. (__=b < ん)))) !> MD

createSubtree MD a b


% なくちゃならない
__=a < なく $. (__ < ちゃ $. (__ < いけ|なら $. (__=b < ない|ず|なく|なかっ|なけれ|なさ|なかろ|な))) !> MD

createSubtree MD a b


% なければなりません
__=a < なけれ $.  (__ < ば $. (__ < いけ|なり $. (__ < ませ $. (__=b < ん)))) !> MD

createSubtree MD a b


% なければならない
__=a < なけれ $. (__ < ば $. (__ < いけ|なら $. (__=b < ない|ず|なく|なかっ|なけれ|なさ|なかろ|な))) $,, /^ADJ|^VB|^AX|^NP-PRD/ !> MD

createSubtree MD a b


% なくちゃいけない
__=a < なく $. (__ < ちゃ $. (__ < いけ|なら $. (__=b < ない|ず|なく|なかっ|なけれ|なさ|なかろ|な))) !> MD

createSubtree MD a b


% ちゃいけない
__=a < ちゃ $. (__ < いけ|なら $. (__=b < ない|ず|なく|なかっ|なけれ|なさ|なかろ|な)) !> MD

createSubtree MD a b


% ちゃいけません
__=a < ちゃ $. (__ < いけ|なり $. (__ < ませ $. (__=b < ん))) !> MD

createSubtree MD a b


% なきゃいけません
__=a < なきゃ $. (__ < いけ|なり $.  (__ < ませ $. (__=b  < ん))) !> MD

createSubtree MD a b


% なきゃいけない
__=a < なきゃ $. (__ < いけ|なら $. (__=b < ない|ず|なく|なかっ|なけれ|なさ|なかろ|な)) $,, /^ADJ|^VB|^AX|^NP-PRD/ !> MD

createSubtree MD a b


% ないといけない
__=a < ない $. (__ < と $. (__ < いけ $. (__=b < な|ず|なく|なかっ|なけれ|なさ|なかろ|ない))) !> MD

createSubtree MD a b


% ないといけません
__=a < ない $. (__ < と $. (__ < いけ $. (__ < ませ $. (__=b < ん)))) !> MD

createSubtree MD a b


% なくてはいけない
__=a < なく $. (__ < て $. (__ < は $. (__ < いけ|なら $. (__=b < ない|ず|なく|なかっ|なけれ|なさ|なかろ|な)))) !> MD

createSubtree MD a b


% てはいけない
__=a < て $. (__ < は $. (__ < いけ|なら $. (__=b < ない|ず|なく|なかっ|なけれ|なさ|なかろ|な))) !> MD

createSubtree MD a b


__=a < なく $. (__=b < ちゃいけない|ちゃならない|てはいけない|てはならない) !> MD

createSubtree MD a b


% なくてはだめだ|なくてはだめです
__=a < なく $. (__ < て $. (__ < は $. (__=b < だめ $. (AX < だろ|だっ|で|に|だ|な|です|でし|でしょ)))) !> MD

createSubtree MD a b


% てはだめだ|てはだめです
__=a < て $. (__ < は $. (__=b < だめ $. (AX < だろ|だっ|で|に|だ|な|です|でし|でしょ))) !> MD

createSubtree MD a b


% なくちゃ|なくっちゃ
__=a < なく|なくっ $. (__=b < ちゃ [ $. (PU < 。|！) | $. (PU < 、$. (/^P\b/ < と)) | $. -RRB- ]) $, /^VB|^ADJ|^AX|^PASS|^NEG/ !> MD

createSubtree MD a b


% なきゃ
!MD=a < なきゃ [ $. (PU < 。|！) | $. (PU < 、$. (/^P\b/ < と)) | $. -RRB- ] $, /^VB|^ADJ|^AX|^PASS|^NEG/ !> MD

relabel a MD


% として
/^P\b/ < と $. (ADV=a < して)

replace a (VB し) (P て)


% うとする
__=a < う|よう $. (__ < と $. (__=b < せ|さ|し|する|すれ|しろ)) !> MD

createSubtree MD a b


% わけがない|わけはない
N=a < わけ $. (/^P\b/ < が|は $. (__=b < /^[な|無][かろ|かっ|く|い|けれ]/)) $, /^VB|^ADJ|^AX|^PASS|^NEG/ !> MD

createSubtree MD a b


% わけ(だ|です)
!MD=x < わけ $. (AX < だろ|だっ|で|に|だ|な|です|でし|でしょ) $, /^VB|^ADJ|^AX|^PASS|^NEG/

relabel x MD


% ねば
NEG=a < ね $. (/^P\b/=b < ば [ $. (PU < 。|！) | $. (PU < 、$. (/^P\b/ < と)) | $. -RRB- ]) $, /^VB|^AX|^PASS/ !> MD

createSubtree MD a b


% こと(だろう|でしょう)
__=a < こと $. (__=b < だろう|でしょう) $, /^VB|^ADJ|^AX|^PASS|^NEG/ !> MD

createSubtree MD a b


% かも
__=a < か $. (__=b < も [ $. (PU < 。|！) | $. (PU < 、$. (/^P\b/ < と)) | $. -RRB- ]) $, /^VB|^ADJ|^AX|^PASS|^NEG/ !> MD

createSubtree MD a b


% よう（だ）
!MD=a < よう $. (AX < だ|だっ|です|でし) $, /^VB|^ADJ|^AX|^PASS|^NEG/ 

relabel a MD


% には相違ない
__=a < に $. (__ < は $. (__ < 相違 $. (__=b < ない))) !> MD

createSubtree MD a b


% に相違ない
__=a < に $. (__ < 相違 $. (__=b < ない)) !> MD

createSubtree MD a b


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% place particles together

% ならば
/^P\b/=a < なら $. (/^P\b/=b < ば) !> P-CONN

createSubtree P-CONN a b


% とともに
/^P\b/=a < と $. (N=y < とも $. (/^P\b/=b < に)) !> P-ROLE

createSubtree P-ROLE a b


% けれども
__=a < けれど|けど $. (/^P\b/=b < も) !> P-CONN

createSubtree P-CONN a b


% とか
/^P\b/=a < と $. (/^P\b/=b < か) !> P-OPTR

createSubtree P-OPTR a b


% っていうか
/^P\b/=a < って $. (__ < いう $. (/^P\b/=b < か)) !> P-ROLE

createSubtree P-ROLE a b


% っていう
/^P\b/=a < って $. (__=b < いう !$. /^P\b/) !> P-ROLE

createSubtree P-ROLE a b


% ばかりに
__=a < ばかり $. (__=b < に) $, /^AX|^ADJI|^VB|^MD|^NEG|^PASS/ !> P-CONN

createSubtree P-CONN a b


% だけに
__=a < だけ $. (__=b < に) $, /^AX|^ADJI|^VB|^MD|^NEG|^PASS/ !> P-CONN

createSubtree P-CONN a b


% だの
__=a < だ $. (/^P\b/=b < の) $, /^N|^AX|^ADJ|^VB|^MD|^NEG|^PASS/ !> P-OPTR

createSubtree P-OPTR a b 


% ども
__=a < ど $. (__=b < も) $, /^VB|^PASS/ !> P-CONN

createSubtree P-CONN a b


% うえで
__=a < うえ|上 $. (__=b < で) $, /^AX|^ADJI|^VB|^MD|^NEG|^PASS/ !> P-CONN

createSubtree P-CONN a b


% うえに
__=a < うえ|上 $. (__=b < に) $, /^AX|^ADJI|^VB|^MD|^NEG|^PASS/ !> P-CONN

createSubtree P-CONN a b


% からすると
__=a < から $. (__ < する $. (__=b < と)) $, /^N/ !> P-ROLE

createSubtree P-ROLE a b


% かわりに
__=a < かわり|代わり $. (__=b < に) $,  /^AX|^ADJI|^VB|^MD|^NEG|^PASS/ !> P-CONN

createSubtree P-CONN a b


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% merge into CONJ

% ばかりで|じゃなく
__=a < ばかり $. (__ < で|じゃ $. (__=b < なく)) !> CONJ

createSubtree CONJ a b


% ばかりではなく
__=a < ばかり $. (__ < で $. (__ < は $. (__=b < なく))) !> CONJ

createSubtree CONJ a b


% だけでなく
/^P\b/=a < だけでなく

relabel a CONJ


% どころか
__=a < どころ $. (__=b < か) !> CONJ

createSubtree CONJ a b


% どころ
/^P\b/=a < どころ

relabel a N


% だす|出す
/^VB/=x $. (/^VB2/=y < /[だ|出][さ|し|す|せ|そ]/)

move y >-1 x 
excise y y


%%%%%%%%%%%%%%%%%%%%%%%%%
% はじめる/始める

/^VB/=x $. (/^VB2/=y < /[はじ|始]め[る|れ|ろ]?/)

move y >-1 x
excise y y


%%%%%%%%%%%%%%%%%%%%%%%%
% VB いる
/^VB2\b/=x < い|いる|いれ|いろ !$, (/^P\b/ < て|で) !$, AX !$, (/^P-OPTR/ $, (/^P\b/ < て|で))

relabel x /^VB2(.*)/VB$1/


% VB2 いる
/^VB\b/=x < い|いる|いれ|いろ $, (/^P-OPTR/ $, (/^P\b/ < て|で)) 

relabel x /^VB(.*)/VB2$1/


% VB2 いく
/^VB\b/=x < /^い[か|き|く|け|こ]/ $, ((/^P\b/ < て|で) $, /^VB/) 

relabel x /^VB(.*)/VB2$1/


% VB2 くる
/^VB\b/=x < こ|き|くる|くれ|こい $, ((/^P\b/ < て|で) $, /^VB/) 

relabel x /^VB(.*)/VB2$1/


%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% make VB2 into VB
/^VB2\b/=y [ $, /^P-ROLE|^NP|^ADVP|NUM/ | $, (/^P-OPTR/ $, /^P-ROLE/) ]

relabel y /^VB2(.*)$/VB$1/


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% combine WNUM, NUM
WNUM|NUM=a $. (PU|SYM $. WNUM|NUM=b) !> WNUM > (__ < WNUM)

createSubtree WNUM a b


WNUM|NUM=a $. WNUM|NUM=b !> WNUM > (__ < WNUM)

createSubtree WNUM a b


NUM=a $. (PU|SYM $. NUM=b) !> NUM

createSubtree NUM a b


NUM=a $. NUM=b !> NUM

createSubtree NUM a b


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% build NUMCLP layer
CL=a $. CL=b !> CL

createSubtree CL a b


@CL=x > @IP|ALTERNATIVE !$, NUM

relabel x SUFFIX


@CL=x > @IP|ALTERNATIVE

adjoinF (NUMCLP @) x


@NUM|WNUM=x !$. CL|NUMCLP > @IP|ALTERNATIVE

adjoinF (NUMCLP @) x


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% place NUM under adjacent NUMCLP
@WNUM|NUM=x $. @NUMCLP=y

move x >1 y


%%%%%%%%%%%%%%%%%%%%%%%%
% project NP from NUMCLP
@NUMCLP=x > @IP $. /^P-ROLE/ 

adjoinF (NP @) x


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% build NP structure
@N|NPR|PRO|WPRO=x > @IP

adjoinF (NP @) x


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% place D under adjacent NP
@D=x $. NP=y

move x >1 y


%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% move SUFFIX inwards
__ <-1 (__=x < __) $. SUFFIX=y

move y $- x


%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% move PREFIX inwards
__ <1 (__=x < __) $, PREFIX=y

move y $+ x


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% build PP structure
NP=x $. /^P\b/=y > IP|ALTERNATIVE

adjoinF (PP @) y


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% place NP under adjacent PP
@NP=x $. (/^PP\b/=y <: /^P\b/)

move x >1 y


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% build ADVP structure
@ADV|WADV=x > @IP|ALTERNATIVE

adjoinF (ADVP @) x


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% build PP structure
ADVP=x $. /^P\b/=y > IP|ALTERNATIVE

adjoinF (PP @) y


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% place ADVP under adjacent PP
ADVP=x $. (/^PP\b/=y <: /^P\b/)

move x >1 y


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% build PP structure
/^PP\b/=x $. (/^P\b/=y !> /^PP\b|CONJP\b/)

adjoinF (PP @) y


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% place PP under adjacent PP
/^PP\b/=x $. (/^PP\b/=y <: /^P\b/)

move x >1 y


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% place の PP under adjacent NP or NP under adjacent PP
/^PP\b/=x < (/^P-ROLE/ <: の) [ $. (@NP=y !< /^\*/) | $. (/^PP\b/ < NP=y) ] > IP

move x >1 y


%%%%%%%%%%%%%%%%%%%%%%%
% creater ADJP
ADJN=a $. (__=b < と) > IP

createSubtree ADVP a b
relabel b AX


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% create subordinate IP
/^ADJI\b|^ADJN\b|^VB\b/=x [ $.. /^VB\b|^ADJI\b|^ADJN\b|^NV\b|^IP/ | $.. (@NP|PP|ADVP $.. /^VB2|^AX|^MD/) | $.. (@NP|PP|ADVP . ID) | $.. (@NP|PP|ADVP . (PU . ID)) ]

adjoinF (IP @) x


@VB2|AX=x $, @NP|PP|ADVP [ $.. /^VB\b|^ADJI\b|^ADJN\b|^NV\b|^IP/ | $.. (@NP|PP|ADVP $.. /^VB2|^AX|^MD/) | $.. (@NP|PP|ADVP . ID) | $.. (@NP|PP|ADVP . (PU . ID)) ]

adjoinF (IP @) x


%%%%%%%%%%%%%%%%%%%%%%%
% IP=z <: __=x $, IP=y
% 
% excise z z
% move x >-1 y


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% bring elements under IP
IP=x [ $. (/^P-OPTR|^P-SPAN|^VB0|^VB2|^AX|^SUFFIX|^MD|^NEG/=y !> /^PP\b/) | $. (/^P-CONN/=y $. /^P-SPAN|^VB0|^VB2|^AX|^SUFFIX|^MD|^NEG/) | $. (/^P-CONN/=y $. (/^P-OPTR/ $. /^P-SPAN|^VB0|^VB2|^AX|^SUFFIX|^MD|^NEG/)) ]

move y >-1 x


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% connective particle integrating IP
IP=a $. /^P-CONN|^P-ROLE/=b > IP

createSubtree PP a b


IP=a $. (/^P\b/=b < と) > IP

createSubtree PP a b


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% build PP structure
/^PP\b/=a $. /^P\b/=b > IP

createSubtree PP a b


%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% move SUFFIX inwards
__ <-1 (__=x < __) $. SUFFIX=y

move y $- x


%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% move FW and PREFIX inwards
__ <1 (__=x < __) $, FW|PREFIX=y

move y $+ x


%%%%%%%%%%%%%%%%%%%%%%%
% add PRD
NP=x $. /^AX/

relabel x NP-PRD


%%%%%%%%%%%%%%%%%%%%%%%%%%%
% merge NPs
NP=x $. (@NP=y > IP)

move x >1 y
excise x x


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% more Ps adjacent to IP
IP=a $. /^P\b/=b > IP

createSubtree PP a b


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% build PP structure
PP=a $. (/^P\b/=b !> PP|CONJP) > IP

createSubtree PP a b


%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% project NP with NUMCLP
@NUMCLP=x > @IP|ALTERNATIVE

adjoinF (NP @) x


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% move IP into nominalization marker
IP=x . (@NP=y <: (@N <: /^\*$/))

move x >1 y


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% move PP adjacent to nominalization marker
/^PP\b/=x . (@NP=y <: (@N <: /^\*$/) !$, /^PP\b/) > IP

move x $+ y


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% make IP with て
PP=z < (IP=y $. (/^P-CONN/=x < て)) !<3 __

move x >-1 y
excise z z


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% でしょう
__=a < でしょう [ $, /^NP|^ADJN|^ADVP/ | $, (/^P\b/ < ん|の) | $, (PP < /^P-OPTR/ < NP) ]

replace a (AX でしょ) (MD う)


% だろう
__=a < だろう [ $, /^NP|^ADJN|^ADVP/ | $, (/^P\b/ < ん|の) | $, (PP < /^P-OPTR/ < NP) ]

replace a (AX だろ) (MD う)


!MD=a < でしょう|だろう

relabel a MD


% であろう
AX < で $. (/^VB2/=a < あろう) [ $, /^NP|^ADJN|^ADVP/ | $, (/^P\b/ < ん|の) | $, (PP < /^P-OPTR/ < NP) ]

replace a (VB2 あろ) (MD う)


AX=a < で $. (/^VB2/=b < あろう) !> MD

createSubtree MD a b


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% merge SUFFIX
!/^PU|RB/=x < (__ !< __) $. SUFFIX=y

move y >-1 x
excise y y


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% merge PREFIX
!/^PU|RB/=x < (__ !< __) $, PREFIX=y

move y >1 x
excise y y


%%%%%%%%%%%%%%%%%%%%%%%%%
% verbal noun
NV=x > @IP $,, /^NP|^PP/

relabel x /^NV(.*)$/VB$1/


/^NV/=x

relabel x N


%%%%%%%%%%%%%%%%%%%%%%%%
% change NEG
NEG=x < ない|なく|なかっ !$,, /^ADJ|^VB|^AX|^NP-PRD/

relabel x ADJI


NEG=x < ない|なく|なさ|なかっ|なき|なけれ|なかろ $, (/^PP\b/ < NP)

relabel x ADJI


%%%%%%%%%%%%%%%%%%%%%%
% have ADJN project ADVP
ADJN=x $. (AX=y < に !$. (/^VB2/ < /なら|なり|なる|なれ|なろ|し|する|さ|せ|すれ|しろ/)) !> ADVP

adjoinF (ADVP @) x
move y $- x


%%%%%%%%%%%%%%%%%%%%%%%
% change VB2
/^VB2\b/=x $, (PP < NP)

relabel x /^VB2(.*)/VB$1/


%%%%%%%%%%%%%%%%%%%%%%%
% change VB

% VB2 ADJN になる 
/^VB\b/=x < /^な[ら|り|る|れ|ろ]/ $, (ADVP=y <-2 /^ADJN/ <-1 (AX < に))

excise y y
relabel x /^VB(.*)/VB2$1/


%%%%%%%%%%%%%%%%%%%%%%%%
% flatten PP
/^PP\b/ < PP=x !< CONJP

excise x x


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% change で も following WPRO
/^P\b/=a < で $. (/^P\b/=b < も) , WPRO !> P-OPTR

createSubtree P-OPTR a b


%%%%%%%%%%%%%%%%%%%%%%%%%
% change CONJ location
IP=x <-1 CONJ=y

move y $- x


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% place NP|PP|ADVP under adjacent IP
/^PP\b|NP\b|ADVP\b/=x [ $. IP=y | $. (PP <1 IP=y) | $. (PP <1 (NP <1 IP=y)) ]  > IP !< (__ < は)

move x >1 y


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% break up /^つつあ/ > AX
/^つつ(あ.*)$/`#'1\%store=x >: AX=z

insert (VB2 =y) $- z
relabel y /^.*$/\%{store}/
relabel z P-CONN
relabel x /つつ/


VB2 < /^(なり|あり|おり|しまい)$/ >-1 /^IP-ADV$/=x

relabel x IP-ADV-CONJ


/^NP-PRD/ $. (AX=y < であろ=x)

insert (VB2 あろ) $- y
relabel x /で/


/^(ほし|欲し)(が.+)$/#1\%first#2\%second=x > VB=y

insert (AX =z) $- y
relabel z /^.*$/\%{second}/
relabel x /^.*$/\%{first}/
relabel y ADJI


/^(た)(が.+)$/#1\%first#2\%second=x > AX=y

insert (AX =z) $- y
relabel z /^.*$/\%{second}/
relabel x /^.*$/\%{first}/



/^(VB|PASS)/ < /(い|き|ぎ|し|じ|ち|ぢ|に|ひ|び|み|り|え|け|げ|せ|ぜ|て|で|ね|へ|べ|め|れ)$/ $. (MD=x < そう)

relabel x AX



/^(ADJI|ADJN|NP-PRD)/ !< (/い$/ > ADJI) $. (MD=x < そう)

relabel x AX


P-SPAN=x

relabel x FN


AX=x < /^(一方|ところ)$/ !>-1 /^IP-ADV/

relabel x FN


%%%%%%%%%%%%%%%%%%%%%%%%%%
% change particles
P-CONN=x > /^IP/ < は|も|まで|ばっかり|ばかり|さえ|など|しか|のみ|なんか|でも !>- /^IP/ !. /RRB/

relabel x P-OPTR


P-ROLE=x < なら $, NP

relabel x P-OPTR


%%%%%%%%%%%%%%%%%%%%%%%%%%
% reposition IP
IP=x [ $. NP=y | $. (PP < NP=y) ] > IP

move x >1 y


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% remove dupicate layers
/^([^-]*)-.*$/`#'1\%main <: /^(.*)$/`#'1\%main=x

excise x x

/^(.*)$/`#'1\%tag <: /^(.*)$/`#'1\%tag=x

excise x x


